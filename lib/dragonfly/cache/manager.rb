# frozen_string_literal: true

require 'dragonfly/cache/mapper/yaml'
require 'dragonfly/cache/storage/local'

module Dragonfly
  module Cache
    class Manager
      extend Forwardable

      MIN_SHA_SIZE = 2
      MAX_SHA_SIZE = 16 # Length of SHA identifier generated by Dragonfly

      attr_reader :plugin, :storage, :map

      delegate %i[config] => :plugin

      def initialize(plugin)
        @plugin = plugin
        @map = Dragonfly::Cache::Mapper::Yaml.new(config.servers_options)
        @storage = Dragonfly::Cache::Storage::Local.new(config.servers_options)
      end

      def cache(job)
        return @map[job.sha] if @map.key?(job.sha)
        store(job, yield)
      end

      def valid?(job, uri)
        valid = (@map.key?(job.sha) && @map[job.sha] == uri) || !@map.key?(job.sha)
        increase_sha_size! unless valid
        valid
      end

      def job_options(job)
        {
          shaish: shaish(job),
          normalized_name: normalized_name(job)
        }
      end

      protected

      def shaish(job)
        job.sha[0..(sha_size - 1)]
      end

      def normalized_name(job)
        basename = job.basename || job.signature
        sanitized = basename.gsub(/[[:space:][:punct:][:cntrl:]]/, ' ').squeeze(' ').strip
        transliterated = I18n.transliterate(sanitized, replacement: ' ').squeeze(' ').strip
        downcased = (transliterated.empty? ? job.signature : transliterated).downcase.tr(' ', '-')
        [downcased, job.ext].compact.join('.')
      end

      def sha_size
        @sha_size ||= [[storage.sha_size, MIN_SHA_SIZE].compact.max, MAX_SHA_SIZE].min
      end

      def increase_sha_size!
        raise Error, "Can't build longer :sha identifier" if @sha_size == MAX_SHA_SIZE
        @sha_size += 1
      end

      def store(job, url)
        storage.store(url, job)
        map.store(job.sha, url)
        url
      rescue Dragonfly::Cache::Error => e
        Dragonfly.warn(e.message)
      end
    end
  end
end
